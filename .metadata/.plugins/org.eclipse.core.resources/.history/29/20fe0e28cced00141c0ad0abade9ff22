package Handler;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import HttpServer.SimpleHttpServer;

import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

public abstract class Handler implements HttpHandler  {
	
	protected SimpleHttpServer server;
	protected String response;
	protected Map params;
	protected String username;
	protected String password;

	
	public Handler(SimpleHttpServer server) {
		this.server = server;
		}
	
	
	public abstract void handle(HttpExchange t) throws IOException;
	
	public  String insertAddress(String html){
		
		html = 	html.replaceAll("<address>", server.address);	
		html = 	html.replaceAll("<port>", String.valueOf(server.port));	

		return html;
	}
	
	public void send(HttpExchange t) throws IOException{
		
		t.sendResponseHeaders(200, response.length());
		OutputStream os = t.getResponseBody();
		os.write(response.getBytes());
		os.close();
	}
	
	public boolean authenticate(HttpExchange t){
		
		
		//Parameter login
		params = (Map)t.getAttribute("parameters");

		//Cookie login
		Headers reqHeaders= t.getRequestHeaders();
		List<String> cookies = reqHeaders.get("Cookie");
		
		String cookiesString = cookies.toString();

		String[] cookieList = cookiesString.toString().substring(1, cookiesString.length() - 1).replaceAll(";", "").replaceAll(" ", "=").split("=");

		for(int i = 0 ; i < cookieList.length ; i++){
						
			if(cookieList[i].equals("username")){
				username = cookieList[i + 1];
			}
			if(cookieList[i].equals("password")){
				password = cookieList[i + 1];
			}
		}

		if(server.db.login(username,password) || server.db.login((String)params.get("username"),(String)params.get("password"))){
			
			return true;
			
		}else{
			
			return false;
		}
		
	}
	
	public void debug(HttpExchange t){
		
		
		System.out.println(t.getProtocol());
		System.out.println(t.getRequestMethod());
		System.out.println(t.getResponseCode());			
		System.out.println(t.getLocalAddress());			
		System.out.println(t.getRequestHeaders().toString() + " S");			
		System.out.println(t.getRequestHeaders());			
		System.out.println(t.getRequestURI());	
		System.out.println(t.getRequestBody());			
		System.out.println(t.getResponseBody().toString() + " S");			
		Iterator p = params.entrySet().iterator();
		
		while(p.hasNext()){
			
			System.out.println(p.next().toString() + " I");
			
		}
		
		BufferedInputStream in = new BufferedInputStream(t.getRequestBody());

		BufferedReader reader = new BufferedReader(new InputStreamReader(t.getRequestBody()));

		try {
		File file = new File("test");
		FileOutputStream out = new FileOutputStream(file);

		if (!file.exists()) {
			file.createNewFile();
		}

		final byte data[] = new byte[1024];
		int count;
		String line;
		
			while ((count = in.read(data, 0, 1024)) != -1) {
				out.write(data, 0, count);
			}
//			
//			while ((line = reader.readLine()) != null) {
//				System.out.println(line);
//			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	

}
}
