package HttpServer;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.Executors;

import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.SimpleScriptContext;

import jssc.SerialPortException;
import Database.Database;
import Reader.ArduinoReader;

import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class SimpleHttpServer extends Observable{

	private ArduinoReader reader;
	
	private Thread thread;
	
	private HttpServer server;
	
	private ArrayList<String> list = new ArrayList<String>();
	
	public HashMap<String, String> fileMap = new HashMap<String, String>();
	
	public String[] fileList = { "/Users/DAnd91/Google Drive/Aptana_saved_files/HtmlServer_workspace/HtmlServer/startPage.html",
								 "/Users/DAnd91/Google Drive/Aptana_saved_files/HtmlServer_workspace/HtmlServer/graphPage.html",
										};
	
	public String[] fileName = { "startPage",
								 "graph"};
	
	private Database db;
	
	protected boolean connected;

	public SimpleHttpServer() {

		initiateDatabase();
		initiateReader();
		initiateFiles();
		initiateServer();
	
	}
	
	private String insertData(String data1, String data2, String html){
		
		StringBuilder sb = new StringBuilder(html);
		
		int htmlStart1 = html.indexOf("Y1=[");
		
		
		int dataEnd1 = data1.length();
		sb.insert(htmlStart1 + 4, data1.substring(1, dataEnd1 - 1));
		
		html = sb.toString();
		sb = new StringBuilder(html);
		
		int htmlStart2 = html.indexOf("Y2=[");
		
		int dataEnd2 = data2.length();
		sb.insert(htmlStart2 + 4, data2.substring(1, dataEnd2 - 1));
		
		return sb.toString();
	}
	
	private void sendToReader(String string) {

		this.setChanged();
		this.notifyObservers(string);

	}

	private String getList() {

		return list.toString();
	}

	private void  initiateServer(){
		
		try {
//
//			 URL whatismyip = new URL("http://checkip.amazonaws.com");
//			 BufferedReader in = new BufferedReader(new InputStreamReader(
//			 whatismyip.openStream()));
//			
//			 String ip = in.readLine(); //you get the IP as a String
//			 System.out.println("ServerInitiate: Server global address is -" + ip);

			server = HttpServer.create(new InetSocketAddress("192.168.0.199",8000), 5);
			server.createContext("/start", new InfoHandler(this));
			server.createContext("/login", new LoginHandler(this));
			server.setExecutor(Executors.newFixedThreadPool(10));
			server.start();
			System.out.println("ServerInitiate: Server started.");

		} catch (IOException e) {

			e.printStackTrace();
		}
	}
	
	private void initiateReader() {

		try {

			reader = new ArduinoReader("/dev/tty.usbmodem1421", this);
			thread = new Thread(reader);
			thread.start();
			
			System.out.println("ReaderInitiate: Seral reader started.");


		} catch (SerialPortException e1) {

			System.out.println("ReaderInitiate: Unable to start seral reader.");
		}
	}

	private void initiateFiles() {

		for (int i = 0; i < fileList.length; i++) {

			StringBuilder contentBuilder = new StringBuilder();
			try {
				BufferedReader in = new BufferedReader(new FileReader(
						fileList[i]));
				String str;
				while ((str = in.readLine()) != null) {
					contentBuilder.append(str);
				}
				in.close();
			} catch (IOException e) {
			}

			fileMap.put(fileName[i], contentBuilder.toString());
		}
		System.out.println("FileInitiate: All files read.");
	}
	
	private void initiateDatabase(){
			
		    Database.initiate();

		      try {
		    	  
		        this.db = Database.getInstance();
		        if(this.db.openConnection("DAnd91", "Taylorutveckling")){
		        	
					System.out.println("DatabaseInitiate: Database initiated.");
		        }

		  } catch (Exception e) {
			  
				System.out.println("DatabaseInitiate: Unable to initiate database.");

		    e.printStackTrace();
		  }
	}
	
	private Map<String, String> queryToMap(String query){
	    Map<String, String> result = new HashMap<String, String>();
	    for (String param : query.split("&")) {
	        String pair[] = param.split("=");
	        if (pair.length>1) {
	            result.put(pair[0], pair[1]);
	        }else{
	            result.put(pair[0], "");
	        }
	    }
	    return result;
	}

	static class InfoHandler implements HttpHandler {
		SimpleHttpServer server;
		public InfoHandler(SimpleHttpServer server) {this.server = server;}
		public void handle(HttpExchange t) throws IOException {

			String response = server.fileMap.get("startPage");
			t.sendResponseHeaders(200, response.length());
			OutputStream os = t.getResponseBody();
			os.write(response.getBytes());
			os.close();
		}
	}
	
	static class LoginHandler implements HttpHandler {
		SimpleHttpServer server;
		public LoginHandler(SimpleHttpServer server) {this.server = server;}
		public void handle(HttpExchange t) throws IOException {
			
			HashMap<String,String> map = (HashMap<String, String>) server.queryToMap(t.getRequestURI().getQuery());
						
			if(server.db.login(map.get("username"),map.get("password"))){
			
			System.out.println("Login: Login successful");
			
			String response = server.insertData( server.db.getData("A"), server.db.getData("B") , server.fileMap.get("graph"));
			t.sendResponseHeaders(200, response.length());
			OutputStream os = t.getResponseBody();
			os.write(response.getBytes());
			os.close();

			if(map.containsKey("a")){
				
				server.sendToReader(map.get("a") + "*" );
				
			}else if(map.containsKey("b")){
				
				server.sendToReader(map.get("b") + "*" );

			}else if(map.containsKey("c")){
				
				server.sendToReader(map.get("c") + "*" );

			}else if(map.containsKey("angle")){
				
				server.sendToReader("S" + map.get("angle") + "E*");

			}
			
			}else{
				
				System.out.println("Login: Login unsuccessful");
				String response = server.fileMap.get("startPage");
				t.sendResponseHeaders(418, response.length());
				OutputStream os = t.getResponseBody();
				os.write(response.getBytes());
				os.close();
			}
		}
	}
	
	public static void main(String[] args) throws Exception {

		SimpleHttpServer http = new SimpleHttpServer();

	}
}